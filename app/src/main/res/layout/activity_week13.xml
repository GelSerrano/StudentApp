<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:orientation="vertical"
    android:layout_height="match_parent"
    tools:context=".week13">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_marginLeft="25sp"
            android:layout_marginRight="20sp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text="AWT and SWING"/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="-	Java Swing is a part of Java Foundation Classes (JFC) that is used to create window-based applications. It is built on the top of AWT (Abstract Windowing Toolkit) API and entirely written in java."/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="15dp"
                android:text="Difference between AWT and Swing."/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="120dp"
                android:src="@drawable/lesson13_pic1"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text="Forms and Menus"/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="- A menu provides a space-saving way to let the user choose one of several options. Other components with which the user can make a one-of-many choice include combo boxes, lists, radio buttons, spinners, and tool bars. Menus are unique in that, by convention, they aren't placed with the other components in the UI. Instead, a menu usually appears either in a menu bar or as a popup menu. A menu bar contains one or more menus and has a customary, platform-dependent location â€” usually along the top of a window."/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text=" Containers "/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="- Containers are the interface between a component and the low-level, platform-specific functionality that supports the component. Before it can be executed, a web, enterprise bean, or application client component must be assembled into a Java EE module and deployed into its container."/>

            <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#000"
            android:layout_margin="15dp"
            android:textStyle="bold"
            android:textSize="20dp"
            android:text=" Frame "/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="- A Frame is a top-level window with a title and a border. The size of the frame includes any area designated for the border. The dimensions of the border area may be obtained using the getInsets method. Since the border area is included in the overall size of the frame, the border effectively obscures a portion of the frame, constraining the area available for rendering and/or displaying subcomponents to the rectangle which has an upper-left corner location of (insets.left, insets.top), and has a size of width - (insets.left + insets.right) by height - (insets.top + insets.bottom)."/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="Example: "/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center"
                android:src="@drawable/lesson13_pic2"/>




            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text=" Panels "/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="- The JPanel class provides general-purpose containers for lightweight components. By default, panels do not add colors to anything except their own background; however, you can easily add borders to them and otherwise customize their painting. Details can be found in Performing Custom Painting. i n many types of look and feel, panels are opaque by default."/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="Example: "/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="251dp"
                android:layout_gravity="center"
                android:src="@drawable/lesson13_pic3" />


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text=" Dialog Box  "/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="- A Dialog window is an independent sub window meant to carry temporary notice apart from the main Swing Application Window. Most Dialogs present an error message or warning to a user, but Dialogs can present images, directory trees, or just about anything compatible with the main Swing Application that manages them. For convenience, several Swing component classes can directly instantiate and display dialogs"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="Example: "/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="165dp"
                android:layout_gravity="center"
                android:src="@drawable/lesson13_pic4" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Components"
                android:textSize="19dp"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text=" Labels  "/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="With the JLabel class, you can display unselectable text and images. If you need to create a component that displays a string, an image, or both, you can do so by using or extending JLabel. If the component is interactive and has a certain state, use a button instead of a label. By specifying HTML code in a label's text, you can give the label various characteristics such as multiple lines, multiple fonts or multiple colors. If the label uses just a single color or font, you can avoid the overhead of HTML processing by using the setForeground or setFont method instead. See Using HTML in Swing Components for details."/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="Example: "/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="324dp"
                android:layout_gravity="center"
                android:src="@drawable/lesson13_pic5" />



            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text=" Button  "/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="Ordinary buttons â€” JButton objects â€” have just a bit more functionality than the AbstractButton class provides: You can make a JButton be the default button. At most one button in a top-level container can be the default button. The default button typically has a highlighted appearance and acts clicked whenever the top-level container has the keyboard focus and the user presses the Return or Enter key. Here is a picture of a dialog, implemented in the ListDialog example, in which the Set button is the default button:"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="Example: "/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="257dp"
                android:layout_gravity="center"
                android:src="@drawable/lesson13_pic6" />
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text=" Text Fields   "/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="A text field is a basic text control that enables the user to type a small amount of text. When the user indicates that text entry is complete (usually by pressing Enter), the text field fires an action event. If you need to obtain more than one line of input from the user, use a text area."/>

            <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="#000"
            android:text="The Swing API provides several classes for components that are either varieties of text fields or that include text fields."/>

            <LinearLayout
                android:layout_marginTop="10dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content">


                <TextView
                    android:layout_width="100dp"
                    android:layout_height="wrap_content"
                    android:textColor="#000"
                    android:text="JTextField"/>
                <TextView
                    android:layout_marginLeft="10dp"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:textColor="#000"

                    android:text="What this section covers: basic text fields."/>
            </LinearLayout>
            <LinearLayout
                android:layout_marginTop="10dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content">


                <TextView
                    android:layout_width="100dp"
                    android:layout_height="wrap_content"
                    android:textColor="#000"
                    android:text="JFormattedTextField"/>
                <TextView
                    android:layout_marginLeft="10dp"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:textColor="#000"

                    android:text="A JTextField subclass that allows you to specify the legal set of characters that the user can enter. See How to Use Formatted Text Fields.
"/>
            </LinearLayout>
            <LinearLayout
                android:layout_marginTop="10dp"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content">


            <TextView
                android:layout_width="100dp"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="JPasswordField"/>
            <TextView
                android:layout_marginLeft="10dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"

                android:text="A JTextField subclass that does not show the characters that the user types."/>
        </LinearLayout>
            <LinearLayout
                android:layout_marginTop="10dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content">


                <TextView
                    android:layout_width="100dp"
                    android:layout_height="wrap_content"
                    android:textColor="#000"
                    android:text="JComboBox"/>
                <TextView
                    android:layout_marginLeft="10dp"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:textColor="#000"

                    android:text="Can be edited, and provides a menu of strings to choose from. "/>
            </LinearLayout>
            <LinearLayout
                android:layout_marginTop="10dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content">


                <TextView
                    android:layout_width="100dp"
                    android:layout_height="wrap_content"
                    android:textColor="#000"
                    android:text="JSpinner"/>
                <TextView
                    android:layout_marginLeft="10dp"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:textColor="#000"

                    android:text="Combines a formatted text field with a couple of small buttons that enables the user to choose the previous or next available value."/>
            </LinearLayout>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="Example: "/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="200dp"
                android:layout_gravity="center"
                android:src="@drawable/lesson13_pic6"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_margin="15dp"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text=" ComboBox "/>
            <TextView
                android:layout_marginLeft="50dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="A JComboBox, which lets the user choose one of several choices, can have two very different forms. The default form is the uneditable combo box, which features a button and a drop-down list of values. The second form, called the editable combo box, features a text field with a small button abutting it. The user can type a value in the text field or click the button to display a drop-down list. Here's what the two forms of combo boxes look like in the Java look and feel: "/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="Example: "/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="150dp"
                android:layout_gravity="center"
                android:src="@drawable/lesson13_pic9"/>

            <Button
                android:text="Take Quiz"
                android:id="@+id/quiz"
                android:layout_marginTop="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginRight="85dp"
                android:layout_marginBottom="40dp"
                android:layout_gravity="right"/>


        </LinearLayout>
    </ScrollView>
</LinearLayout>