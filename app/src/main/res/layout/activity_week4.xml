<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".week4">

    <ScrollView
        android:layout_width="match_parent"

        android:layout_height="match_parent">

        <LinearLayout
            android:layout_marginLeft="25sp"
            android:layout_marginRight="30sp"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical" >
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textStyle="bold"
            android:textColor="#000"
            android:textSize="20sp"
            android:layout_margin="15dp"
            android:text="Characters"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"

                android:text="Most of the time, if you are using a single character value, you will use the primitive char type. For example:"/>

            <ImageView
                android:layout_marginTop="10dp"
                android:layout_width="wrap_content"
                android:layout_height="60dp"
                android:src="@drawable/lesson4_pic1" />
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="There are times, however, when you need to use a char as an object—for example, as a method argument where an object is expected. The Java programming language provides a wrapper class that wraps the char in a Character object for this purpose. An object of type Character contains a single field, whose type is char. This Character class also offers a number of useful class (i.e., static) methods for manipulating characters."/>
            <TextView
                android:layout_width="wrap_content"
                android:textColor="#000"
                android:layout_height="wrap_content"
                android:text="You can create a Character object with the Character constructor:"/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson4_pic3"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="The following table lists some of the most useful methods in the Character class, but is not exhaustive. For a complete listing of all methods in this class (there are more than 50), refer to the java.lang.Character API specification."/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="78dp"
                android:src="@drawable/lesson4_pic4" />



            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Escape Sequences"
                android:textSize="20sp"
                android:textStyle="bold"
                android:textColor="#000"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="A character preceded by a backslash (\) is an escape sequence and has special meaning to the compiler. The following table shows the Java escape sequences:"/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="150dp"
                android:src="@drawable/lesson4_pic5"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Strings"
                android:textColor="#000"
                android:textStyle="bold"
                android:textSize="25sp"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="\nStrings, which are widely used in Java programming, are a sequence of characters. In the Java programming language, strings are objects.\n
\nThe Java platform provides the String class to create and manipulate strings."/>
            <TextView
                android:textColor="#000"
                android:textStyle="bold"
                android:layout_margin="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Creating Strings"
                android:textSize="20sp"/>
            <TextView
                android:layout_width="wrap_content"
                android:textColor="#000"

                android:layout_height="wrap_content"
                android:text="The most direct way to create a string is to write:"/>

           <ImageView
               android:layout_width="wrap_content"
               android:layout_height="30dp"
               android:src="@drawable/lesson4_pic6"/>

            <TextView
                android:layout_width="wrap_content"
                android:textColor="#000"
                android:layout_height="wrap_content"
                android:text="In this case, Hello world! is a string literal—a series of characters in your code that is enclosed in double quotes. Whenever it encounters a string literal in your code, the compiler creates a String object with its value—in this case, Hello world!.\n
         As with any other object, you can create String objects by using the new keyword and a constructor. The String class has thirteen constructors that allow you to provide the initial value of the string using different sources, such as an array of characters:"/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="50dp"
                android:src="@drawable/lesson4_pic7"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:text="The last line of this code snippet displays hello."/>




            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Conditional Statement"
                android:textSize="25sp"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Java has the following conditional statements:\n
\n
Use if to specify a block of code to be executed, if a specified condition is true\n
Use else to specify a block of code to be executed, if the same condition is false\n
Use else if to specify a new condition to test, if the first condition is false\n
Use switch to specify many alternative blocks of code to be executed\n
"/>
            <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Booleans"
                android:textSize="25sp"
                />
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Very often, in programming, you will need a data type that can only have one of two values, like:\n
\n
YES / NO\n
ON / OFF\n
TRUE / FALSE\n
For this, Java has a boolean data type, which can take the values true or false."/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="100dp"
                android:src="@drawable/lesson4_pic8"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The if Statement"
                android:textSize="25sp"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Use the if statement to specify a block of Java code to be executed if a condition is true."/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson4_pic9"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The if-then-else Statement"
                android:textSize="20sp"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The if-then-else statement provides a secondary path of execution when an if clause evaluates to false. You could use an if-then-else statement in the applyBrakes method to take some action if the brakes are applied when the bicycle is not in motion. In this case, the action is to simply print an error message stating that the bicycle has already stopped.s"/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson4_pic10"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text=""/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text=""/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for a score of 90% or above, a B for a score of 80% or above, and so on."/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson4_pic11"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text=""/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text=""/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text=""/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The output from the program is:\n
\n
 \n  Grade = C"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Nested if Statement"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The nested if statement represents the if block within another if block. Here, the inner if block condition executes only when outer if block condition is true."/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson4_pic12"/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson4_pic13"/>

            <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="The Switch Statement"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Unlike if-then and if-then-else statements, the switch statement can have a number of possible execution paths. A switch works with the byte, short, char, and int primitive data types. It also works with enumerated types (discussed in Enum Types), the String class, and a few special classes that wrap certain primitive types: Character, Byte, Short, and Integer (discussed in Numbers and Strings).\n
\n
\nThe following code example, SwitchDemo, declares an int named month whose value represents a month. The code displays the name of the month, based on the value of month, using the switch statement.
\n
"/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson4_pic14"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="In this case, August is printed to standard output."/>


            <Button
                android:text="Take Quiz"
                android:id="@+id/quiz"
                android:layout_marginTop="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginRight="85dp"
                android:layout_marginBottom="40dp"
                android:layout_gravity="right"/>


</LinearLayout>
    </ScrollView>
</LinearLayout>