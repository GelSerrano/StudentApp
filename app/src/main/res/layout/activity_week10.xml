<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".week10">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_marginLeft="15dp"
        android:layout_marginRight="15dp"
        android:layout_height="match_parent">

        <LinearLayout

            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="wrap_content"
                android:text="Inheritance"
                android:textStyle="bold"
                android:textColor="#000"
                android:textSize="15dp"
                android:layout_margin="20dp"
                android:layout_height="wrap_content"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="#000"
                android:layout_marginLeft="15dp"
                android:text="a kind of software reuse. With inheritance, a new class is constructed by holding an existing class’s member and enhancing them with new or revised capabilities. And it implemented in accordance with Java framework. "
                />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textStyle="bold"
                android:layout_margin="10dp"
                android:layout_marginTop="10dp"
                android:textSize="20sp"
                android:text="Overriding and Hiding Methods "
                android:textColor="#000"/>
            <TextView
                android:layout_marginTop="10dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The overriding method has the same name, number and type of parameters, and return type as the method that it overrides. An overriding method can also return a subtype of the type returned by the overridden method. This subtype is called a covariant return type."
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="The distinction between hiding a static method and overriding an instance method has important implications:"
                android:textColor="#000"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="\t\t\t •	\t\t\tThe version of the overridden instance method that gets invoked is the one in the subclass.\n\n\t\t\t •	\t\t\t	The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass.\n"
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textSize="20sp"
                android:textStyle="bold"
                android:text="Polymorphism "
                android:layout_margin="10dp"
                android:textColor="#000"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginLeft="20dp"
                android:layout_marginRight="20dp"
                android:text="\t\t\t -	Allows creating programs that process objects sharing the same superclass in a class hierarchy. System can be constructed and employed in new classes that can be with few or no alteration using polymorphism. The only parts of a program that should be modified to allow new classes are those that need direct knowledge of the new classes that the programmer adds. Polymorphism arises when programs call upon a method through a superclass variable at run time. "
                android:textColor="#000" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Example: "
                android:layout_margin="15dp"
                android:textSize="15dp"
                android:textColor="#000"/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson10_pic1"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="In this example, reference of class B can hold object of class B or an object of any subclass of class b. Class B extends A. "
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="15dp"
                android:text="Hiding Field "
                android:textStyle="bold"
                android:textSize="20sp"
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="\t\t-\t\t	Within a class, a field that has the same name as a field in the superclass hides the superclass's field, even if their types are different. Within the subclass, the field in the superclass cannot be referenced by its simple name. Instead, the field must be accessed through super, which is covered in the next section. Generally speaking, we don't recommend hiding fields as it makes code difficult to read."
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="15dp"
                android:text="Using the Keyword super"
                android:textStyle="bold"
                android:textSize="20sp"
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="\t\t-\t\t	-	Use the keyword super when a subclass wants to refer to its direct superclass. Super can be used to call superclass constructor from a subclass. Super can also be used to call a superclass instance in a subclass. The classes will automatically have member variable ‘name’ them "
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Example: "
                android:textStyle="bold"
                android:textSize="15dp"
                android:layout_margin="15dp"
                android:textColor="#000"/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson10_pic2"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="In the example shown, instance variable of current class is indicated through instance by default, but we have to indicate parent class instance variable that is why we use super keyword to differentiate the parent class the parent class instance variable and current class instance variable. \nThis means that if super keyword is used before specifying speed, the speed of Motorcycle is printed. It is 150. Otherwise, the speed of Suzuki,120, is printed instead.\n"
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textStyle="bold"
                android:textSize="20dp"
                android:text="Writing Final Classes and Methods"
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="You can declare some or all of a class's methods final. You use the final keyword in a method declaration to indicate that the method cannot be overridden by subclasses. The Object class does this—a number of its methods are final. \n
You might wish to make a method final if it has an implementation that should not be changed and it is critical to the consistent state of the object. For example, you might want to make the getFirstPlayer method in this ChessAlgorithm class final:
"
                android:textColor="#000"/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson10_pic3"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text=""
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Methods called from constructors should generally be declared final. If a constructor calls a non-final method, a subclass may redefine that method with surprising or undesirable results.
\nNote that you can also declare an entire class final. A class that is declared final cannot be subclassed. This is particularly useful, for example, when creating an immutable class like the String class.\n
"
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textStyle="bold"
                android:textSize="20sp"
                android:text="Abstract Methods and Classes"
                android:textColor="#000"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Abstract Class"
                android:textSize="15dp"
                android:textStyle="bold"
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="\t\t-\t\t	An abstract class is a class that is declared abstract—it may or may not include abstract methods. Abstract classes cannot be instantiated, but they can be subclassed."
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Abstract Method"
                android:textSize="15dp"
                android:textStyle="bold"
                android:textColor="#000"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="\t\t-\t\t	An abstract method is a method that is declared without an implementation (without braces, and followed by a semicolon), like this:"
                android:textColor="#000"/>

            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson10_pic4"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="\nIf a class includes abstract methods, then the class itself must be declared abstract, as in:\n"
                android:textColor="#000"/>
            <ImageView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/lesson10_pic5"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared abstract."
                android:textColor="#000"/>


            <Button
                android:text="Take Quiz"
                android:id="@+id/quiz"
                android:layout_marginTop="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginRight="85dp"
                android:layout_marginBottom="40dp"
                android:layout_gravity="right"/>

        </LinearLayout>
    </ScrollView>
</LinearLayout>